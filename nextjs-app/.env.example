# Local / example environment variables for Amber (do NOT commit real secrets)
#
# Backend (Flask)
DATABASE_URL=sqlite:///amber.db            # e.g., sqlite:///amber.db or postgresql://user:pass@host:5432/amber
ADMIN_JWT_SECRET=your_admin_jwt_secret
ADMIN_BOOTSTRAP_SECRET=your_bootstrap_secret
ADMIN_JWT_TTL=3600                         # optional, seconds

# Redis (for rate limiting)
REDIS_URL=redis://localhost:6379/0
RATE_LIMITING_ENABLED=true
REQUESTS_PER_MINUTE=60
BURST_SIZE=60
WINDOW_SECONDS=60

# Twitter / X ingestion (backend)
# Set either TWITTER_* or X_* names â€” both are supported by PRs; set both to be safe
TWITTER_ENABLED=0                          # 1 to enable Twitter ingestion (feature flag)
TWITTER_BEARER_TOKEN=your_twitter_bearer_token_here
TWITTER_LIMIT=10                           # max tweets per request

X_INGEST_ENABLED=false                     # alternative flag name used in some branches (true/false)
X_INGEST_LIMIT=10
X_BACKFILL_COUNT=50                        # Number of posts to fetch for initial backfill
X_INGEST_INTERVAL_MINUTES=30               # Interval between scheduled ingestion runs
# Or use cron syntax: X_INGEST_CRON=*/30 * * * *  # Every 30 minutes

# Facebook Graph (optional)
FACEBOOK_GRAPH_ENABLED=0
FACEBOOK_GRAPH_TOKEN=your_facebook_token_here
FACEBOOK_GRAPH_LIMIT=5

# News scraper
NEWS_SEARCH_WINDOW=when:30d
NEWS_LANGUAGE=hi-IN
NEWS_CEID=IN:hi
NEWS_GL=IN
NEWS_SCRAPER_USER_AGENT=AmberNewsBot/1.0 (+https://github.com/Kodanda10/Amber)

# App settings
POST_LIMIT=6

# Optional: production DB and secrets (production example)
# DATABASE_URL=postgresql://user:pass@prod-host:5432/amber
# TWITTER_BEARER_TOKEN=prod_token
# ADMIN_JWT_SECRET=prod_admin_secret

# Observability / Logging (optional)
SENTRY_DSN=                         # add if you use Sentry
PROMETHEUS_ENABLED=0                # enable Prometheus metrics collection

# Notes:
# - Never commit real secrets. Use your host's secrets manager (Vercel/Render/GH Secrets)
# - Feature flags: enable ingestion flags only after testing in staging.
# - Redis is required for distributed rate limiting. Run: docker run -d -p 6379:6379 redis:alpine
