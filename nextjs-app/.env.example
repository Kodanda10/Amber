# Local / example environment variables for Amber (do NOT commit real secrets)
#
# Backend (Flask)
DATABASE_URL=sqlite:///amber.db            # e.g., sqlite:///amber.db or postgresql://user:pass@host:5432/amber
ADMIN_JWT_SECRET=your_admin_jwt_secret
ADMIN_BOOTSTRAP_SECRET=your_bootstrap_secret
ADMIN_JWT_TTL=3600                         # optional, seconds

# Twitter / X ingestion (backend)
# Set either TWITTER_* or X_* names â€” both are supported by PRs; set both to be safe
TWITTER_ENABLED=0                          # 1 to enable Twitter ingestion (feature flag)
TWITTER_BEARER_TOKEN=your_twitter_bearer_token_here
X_API_BEARER=your_twitter_bearer_token_here  # alternative env var name
TWITTER_LIMIT=10                           # max tweets per request

X_INGEST_ENABLED=false                     # alternative flag name used in some branches (true/false)
X_INGEST_LIMIT=10
INGESTION_DRY_RUN=false                    # true = fetch & validate but don't persist

# Checkpoint storage (for resumable ingestion)
CHECKPOINT_DIR=./checkpoints               # directory for checkpoint files (default: ./checkpoints)

# Dashboard embedding (secure token-based embedding)
EMBED_ENABLED=false                        # true to enable embed token endpoint
EMBED_SIGNING_KEY=your_strong_secret_key_here_min_32_chars  # REQUIRED for embedding, use strong random key
EMBED_ALLOWED_ORIGINS=https://example.com,https://trusted-domain.com  # comma-separated allowed origins
EMBED_TOKEN_TTL=60                         # token TTL in seconds (default: 60)

# Rate limiting (for embed token endpoint)
EMBED_RATE_LIMIT_REQUESTS=10               # max requests per window
EMBED_RATE_LIMIT_WINDOW=60                 # window in seconds

# Admin API key (for embed token endpoint authentication)
ADMIN_API_KEY=your_admin_api_key_here      # API key for /api/embed/token endpoint

# Facebook Graph (optional)
FACEBOOK_GRAPH_ENABLED=0
FACEBOOK_GRAPH_TOKEN=your_facebook_token_here
FACEBOOK_GRAPH_LIMIT=5

# News scraper
NEWS_SEARCH_WINDOW=when:30d
NEWS_LANGUAGE=hi-IN
NEWS_CEID=IN:hi
NEWS_GL=IN
NEWS_SCRAPER_USER_AGENT=AmberNewsBot/1.0 (+https://github.com/Kodanda10/Amber)

# App settings
POST_LIMIT=6

# Optional: production DB and secrets (production example)
# DATABASE_URL=postgresql://user:pass@prod-host:5432/amber
# TWITTER_BEARER_TOKEN=prod_token
# ADMIN_JWT_SECRET=prod_admin_secret
# EMBED_SIGNING_KEY=prod_embed_key_at_least_32_chars_long

# Observability / Logging (optional)
SENTRY_DSN=                         # add if you use Sentry
PROMETHEUS_ENABLED=0                # enable Prometheus metrics collection

# Secrets Management
# For production, use your platform's secrets manager:
# - AWS: AWS Secrets Manager or SSM Parameter Store
# - GCP: Secret Manager
# - Azure: Key Vault
# - Kubernetes: Secrets
# - Docker: Docker Secrets
# Example integration code in config loader (config/index.py)

# Notes:
# - Never commit real secrets. Use your host's secrets manager (Vercel/Render/GH Secrets)
# - Feature flags: enable ingestion flags only after testing in staging.
# - Generate EMBED_SIGNING_KEY: python -c "import secrets; print(secrets.token_urlsafe(32))"
# - Rotate secrets regularly and update environment without downtime